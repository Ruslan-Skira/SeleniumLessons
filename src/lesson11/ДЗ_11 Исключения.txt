# Задачи обработку исключений

=====================================================
Шилдт "Руководство для начинающих" 6 изд.
стр. 323-353
=====================================================
************Обязательно*****************
1) модифицировать реализацию класса TimeImpl из прошлого задания, добавив обработку исключения 
	в методы set и конструкторы при попытки передать некорректные значения
		- протестировать работу методов set и конструкторов в функции main на некорретных данных, перехватывая исключение  
		
2) Задача на Random 	
	- наполнить массив случайными числами от 1 до 15 типа double
	- округлить до 3 знаков после запятой и сохранить в новый массив (использовать ВigDecimal)
	- вывести на экран значения исходного массива и округленные значения

***************Дополнительно**************
3) 	a) описать интерфейс ArithmeticOperations, в котором описаны базовые методы калькулятора:
		- сложение
		- вычитание
		- умножение 
		- деление 
		- вычисление процента
		- вычисления корня квадратного
		- вычисления квадрата числа
		- вычисления обратного числа 1/x
	
	b) бросать исключения, если некорректный параметр, в методах:
		(создать класс исключений, который унаследован от Exception)
		- деление (на ноль)
		- вычисление корня квадратного (отрицательное число)
		- вычисление обратного числа (ноль)
		
	c) Создать класс Calculator, который реализует интерфейс Operation
		
	d) протестировать работу Calculator в функции main 
		- на корректных параметрах
		- на некорректных параметрах (попытка поделить на ноль), перехватывая исключения
		- при тестах класса использовать ссылку на интерфейс: Operation calculator = new Calculator();
	
	e)* описать интерфейс ScientificOperations, который расширяет интерфейс ArithmeticOperations и в котором описаны специфичные для научных рассчетов операции:
		(методы должны бросать исключения при некорректных параметрах)
		- вычисление синуса, косинуса, тангенса, котангенса
		- вычисление логарифма
		- возведение любого числа в любую степень
		- вычисление факториала: 7! = 1*2*3*4*5*6*7;
		- вычисление експоненты
		
	f)* Создать класс ScientificCalculator, который реализовывает интерфейс ScientificOperations
	
	g)* протестировать работу ScientificCalculator в функции маin:
		- на корректных
		- на некорретных параметрах, перехватывая исключения
		- при тестах класса использовать ссылку на интерфейс: ScientificOperations calculator = new ScientificCalculator();
	
	h)** Расширить фозможности, калькулятора, чтобы он запоминал историю операций (в массив или класс List).
		Для этого продумать и реализовать специальный класс, который хранит параметры, операцию и результат вычисления
		- протестировать возможность калькулятора запоминать и выдавать историю вычислений
	
	k) Использовать класс BigDecimal в реализации калькулятора, чтобы обойти ограничения, связанные с примитивными типами
	
	l) Добавить в калькулятор опцию генерации случайного числа 
		(можно расширить существующий интерфейс, добавив метод по умолчанию)
	
	m) Добавить в калькулятор опцию округлить число
		(можно расширить существующий интерфейс, добавив метод по умолчанию)
	
	n)* упаковать написанное приложение Калькулятор в jar файл.
	
	

4) Реализовать консольное приложение для вычислений, в котором пользователь вводит команды для выполнения арифметической операции 
	и выполняет расчет, использую класс Калькулятор, описанный в предыдущей задаче.
	- при вводе необходимо проверять формат данных и бросать и обрабатывать исключение, если пользователь ввел некорретные данные
		(напр. символы алфавита, вместо цифр и т.д).


		//java options where? for the assert
		//HM test the HOURS12
		and HOURS24
		
	
	
			
	


	
