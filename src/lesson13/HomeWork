# Задачи на коллекции Java

=====================================================
Шилдт "Java. ПОЛНОЕ РУКОВОДСТВО" 2013г. 8 изд.
Глава 17 "...Collections Framework", стр. 473-543 - "Коллекции"
=====================================================

1) Дан массив имен: {"Peter", "Helen", "Andry", "Abdel", "Kate", "Veronica", "Leonid", "Alex", "max}
	a) Создать список List из элементов массива и вывести на экран
	b) Добавить 3 новых имени в список (Philip, Joseph, Leon) и вывести весь список на экран
	c) Удалить из списка все имена: Veronica, Leonid и вывести на экран
	d) Поменять имя Helen на Elizabet
	e) Отсортировать имена по алфавиту и вывести на экран
	f) Отсортировать имена в обратном порядке и вывести имена на экран
	g) Перевести все первые символы в верхний регистр
	h) Вывести все имена, начинающиеся на букву A
	i) Проверить, содержит ли список имя Andry
	j) Удалить из списка все имена кроме Kate и Helen

2) List
	a) создать список целых чисел
	b) наполнить список случайными целыми числами от 1 до 100 (размер списка 20 элементов)
	c) вывести список на экран
	d) вывести минимальное, максимально значения
	e) вывести сумму чисел на экран
	f) найти наиболее часто встречающееся число, вывести это число и кол-во повторений на экран
		(если чисел несколько с одинаковой частотой повторений, то вывести минимальное из них)

3) List
	a) создать список List целых чисел
	b) заполнить его случайными значениями 10-ти значных чисел, первый три цифры 999, остальные - любые, последняя заканчивается на 0 или 5
	c) Вывести список на экран
	d) Проверить значения списка, с помощью регулярного выражения.

4) a) Напишите класс Student, предоставляющий информацию об студенте:
		конструктор:
			Student(long id, String name, int cource);  // если id отрицательное и cource < 0 и > 5 - бросается исключение

		поля:
			long id 		// уникальный номер ученика
			String name 	// имя
			int course 		// курс

		методы:
			getId()
			getName()
			getCourse()
			nextCource()  // переводит студента на следующий курс, если id становится больше 5 - бросается исключение

	с) Создайте interface School, в котором есть
		методы:
			- add(Student) 		//  который добавляет нового студента в список
			- remove(long id)  	// удаляет студента из списка по id
			- remove(Student) 	// которые удаляет студента из списка
			- printStudents(int course) // который получает номер курса и печатает в консоль имена тех студентов из списка,
											которые обучаются на данном курсе в алфавитном порядке.
											Для обхода списка в этом методе используйте итератор.
			- printStudents() 		// печатает в консоль информацию о всех студентов отсортированную сначала по номеру курса, потом по имени
			- printProfile(long id) // выводит информацию о студенте по id
			- nextCourceEvent() 	// который переводит всех студентов на следующих курс,
												а тех кто был на последнем курсе удаляет из списка

	d) Создайте класс SchoolList, который реализует интерфейс School.
		В качестве контейнера для студентов исользовать поле List:
			List<Student> students;

	e) Создайте класс SchoolMap, который реализует интерфейс School.
		В качестве контейнера для студентов исользовать поле ассоциативный массив Map:
			Map<Long, Student> students;

	f) Создайте 10 экземпляров класса Student и поместите в School. Протестируйте работу методов классов SchoolList и SchoolMap

5) Ввести слово и вывести его буквы в обратном порядке. Использовать класс Stack.

6) Представить данные о пользователях в виде ассоциативного массива (Map) (login / пароль) с предположением, что все логины пользователей разные.

	Написать метод:
		- print(Map<String, String> accounts, length) // который выводит данные о пользователях с длиной пароля длиннее length

7) Есть два списка email:
		set1 = {"account@gmail.com", "my-mail@yandex.ru", "abc@yahoo.com", "mail@gmail.com"}
		set2 = {"student@gmail.com", "my-mail@yandex.ru", "private-mail@yahoo.com", "mail-for-spam@gmail.com"}

	a) вывести на экран email, которые встречаются в двух списках
	b) вывести на экран email из первого списка, которых нет во втором
	c) вывести на экран email из двух списков, но чтобы не было повторений
	(Использовать коллекцию Set)

8) Реализуйте класс MessageContainer который накапливает и выдает сообщение по запросу:
		поля:
			Deque<String> msgBuffer; // здесь накапливает сообщения

		методы:
			- addMessage(String message) // добавляет сообщение в конец очереди
			- printMessage() // печает и удаляет самое раннее сообщение на консоль
			- printLastMessage() // печатает и удаляет последнее сообщение на консоль
			- printAllMessages() // печатает и удаляет все сообщения на консоль в порядке поступления










